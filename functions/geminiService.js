
import { GoogleGenAI, Modality } from "@google/genai";

/**
 * Cloudflare Pages Function to handle POST requests for Gemini API.
 * It expects a JSON body with a `type` ('description' or 'image') and a `prompt`.
 * The API key is securely accessed from environment variables.
 * @param {object} context - The Cloudflare function context.
 * @param {Request} context.request - The incoming request object.
 * @param {object} context.env - The environment variables.
 * @returns {Response} A JSON response with the result or an error.
 */
export async function onRequestPost(context) {
  try {
    const { env } = context;
    const body = await context.request.json();
    const { type, prompt } = body;

    if (!prompt || !type) {
      return new Response(JSON.stringify({ error: 'Missing type or prompt in request body' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Use API_KEY from Cloudflare's environment secrets
    const ai = new GoogleGenAI({ apiKey: env.API_KEY });
    let result;

    if (type === 'description') {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `Provide a concise, one-paragraph technical description for the following electronic component, suitable for an inventory management system: "${prompt}". Focus on its primary function and key features.`,
            config: {
                temperature: 0.5,
                topP: 0.95,
                topK: 64,
                maxOutputTokens: 150,
            },
        });

        result = response.text;
        if (!result) {
            console.warn(`Gemini API returned no text for prompt: "${prompt}".`);
            throw new Error(`A description for ${prompt} could not be automatically generated.`);
        }
    } else if (type === 'image') {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
              parts: [{ text: `A high-quality, professional product photograph of a single "${prompt}" electronic component, on a clean, white background. The image should be clear, well-lit, and show the component in a standard orientation.` }],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });

        const imagePart = response.candidates?.[0]?.content?.parts?.find(p => p.inlineData);

        if (imagePart && imagePart.inlineData) {
            const base64ImageBytes = imagePart.inlineData.data;
            const mimeType = imagePart.inlineData.mimeType;
            result = `data:${mimeType};base64,${base64ImageBytes}`;
        } else {
            throw new Error("No image was generated by the model. It may have refused the request.");
        }
    } else {
      return new Response(JSON.stringify({ error: 'Invalid type specified. Use "description" or "image".' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
    }
    
    return new Response(JSON.stringify({ result }), {
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error("Cloudflare Function Error:", error);
    
    let errorMessage = 'An internal server error occurred.';
    if (error.message) {
        if (error.message.includes('RESOURCE_EXHAUSTED') || error.message.includes('429')) {
            errorMessage = 'API rate limit or quota exceeded. Please try again later.';
        } else {
            errorMessage = error.message;
        }
    }
    
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
