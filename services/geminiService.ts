/**
 * Generates a technical description for a given component name by calling our backend function.
 * @param {string} componentName - The name of the electronic component.
 * @returns {Promise<string>} A promise that resolves to the generated description.
 * @throws {Error} Throws an error if the API call fails or returns no content.
 */
export const generateDescription = async (componentName: string): Promise<string> => {
  try {
    // The backend function is located at /functions/geminiService.js, which is served at /geminiService
    const response = await fetch('/geminiService', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ type: 'description', prompt: componentName }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: `Request failed with status ${response.status}` }));
      throw new Error(errorData.error || `An unknown server error occurred.`);
    }

    const data = await response.json();
    if (!data.result) {
        throw new Error(`A description for "${componentName}" could not be automatically generated.`);
    }
    return data.result;
  } catch (error: any) {
    console.error("Gemini Description call failed:", error);
    // Re-throw a clean error message for the UI to display
    throw new Error(error.message || 'Failed to generate description. Please try again.');
  }
};

/**
 * Generates an image for a given component name by calling our backend function.
 * @param {string} componentName - The name of the electronic component.
 * @returns {Promise<string>} A promise that resolves to a base64 data URL of the generated image.
 * @throws {Error} Throws an error if the API call fails or no image is generated.
 */
export const generateImage = async (componentName: string): Promise<string> => {
  try {
    // The backend function is located at /functions/geminiService.js, which is served at /geminiService
    const response = await fetch('/geminiService', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ type: 'image', prompt: componentName }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: `Request failed with status ${response.status}` }));
      throw new Error(errorData.error || `An unknown server error occurred.`);
    }
    
    const data = await response.json();
    if (!data.result) {
        throw new Error("No image was generated by the model. It may have refused the request.");
    }
    return data.result;
  } catch (error: any) {
    console.error("Gemini Image Generation call failed:", error);
    // Re-throw a clean error message for the UI to display
    throw new Error(error.message || 'Failed to generate image. Please try again.');
  }
};

/**
 * Sends a query to the AI Lab Assistant backend function.
 * @param {string} prompt - The user's question.
 * @param {string} context - The stringified JSON of the current component inventory.
 * @returns {Promise<string>} A promise that resolves to the AI's answer.
 * @throws {Error} Throws an error if the API call fails.
 */
export const askAILabAssistant = async (prompt: string, context: string): Promise<string> => {
  try {
    const response = await fetch('/geminiService', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type: 'assistant', prompt, context }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: `Request failed with status ${response.status}` }));
      throw new Error(errorData.error || `An unknown server error occurred.`);
    }

    const data = await response.json();
    if (!data.result) {
        throw new Error(`The AI assistant could not provide a response.`);
    }
    return data.result;
  } catch (error: any) {
    console.error("AI Assistant call failed:", error);
    throw new Error(error.message || 'Failed to get a response from the assistant.');
  }
};